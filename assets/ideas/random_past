epic_gl.fragment_shader = """#version 330
varying vec2 pixel;
uniform float time;
uniform vec2 mouse;
uniform vec2 camera;
uniform sampler2D color_layer;
uniform sampler2D opacity_layer;
uniform sampler2D noise_texture;
//uniform sampler2D test_texture;
//uniform sampler2D noise_texture;
const float TILE_SIZE = 1/12;
float rangle (vec2 v) {
    return atan(v.y, v.x);
}
float dangle (float a, float b) {
    float d = abs(a-b);
    return d > 3.14159 ? d - 3.14159 * 2. : d;
}
float sq (float x) {
    return x * x;
}
vec2 max_value (vec2 a, vec2 b) {
    return length(a)>length(b)?a:b;
}
float smooth_mirror (float lb, float ub, float v) {
    return smoothstep(lb, ub, v) + smoothstep(-lb, -ub, -v);
}
vec3 march (vec2 o) {
    // return vec3 (opacity, newx, newy)
    float br = 1.0;
    float dist = length(o);
    float step_size = dist/256.;
    vec2 d = -normalize(o)*step_size;
    vec2 stort = o - camera;
    vec2 portaled = o - camera;
    vec2 displacement = vec2(0.);

    for (int i = 0; i<256; i++) {
        vec3 ct = texture2D(opacity_layer, o - camera).rgb;
        br -= ct.r*0.10 * dist;
        vec2 disp = (ct.gb - 0.50);
        disp = smoothstep(vec2(0.01), vec2(0.1), disp);
        o += d;
        displacement = max_value(disp, displacement);
        // if (length(disp) > length(displacement)){
        //     displacement = disp;
        //     portaled = stort + disp;
        // }
    }
    //float dis = smoothstep(0.0, 0.3, length(displacement)) * 2.4;
    //br = mix(br, 1.+br, dis);
    return vec3(br, displacement);
}
void main()
{
    vec2 uv = (pixel + 1.)/2.-0.5;
    vec2 m = mouse-0.5;
    float mangle = rangle(m);
    float pangle = rangle(uv);

    float fov = 0.5;
    float range = 0.8;
    //get static light value from texture here
    float static_light = 0.0;
    float inAngle = smoothstep(fov, 0.0, sq(
        dangle(pangle, mangle)
    )) * sq(smoothstep(range, 0.0, length(uv)));

    vec2 cam_pos = uv - camera;
    vec3 mar = march(uv);
    float op = mar.x;
    vec2 np = mar.yz;

    vec3 fcolor = vec3(1.0, 1.0, 1.0);
    vec2 rando = texture2D(noise_texture, vec2(texture2D(noise_texture, uv*10. - time * 0.001).r, sin(uv.y)) * 0.4 + time * 0.001).rg * 0.1;
    vec3 mcolor = texture2D(color_layer, cam_pos).rgb;
    float np_c = smoothstep(0., 0.3, length(np)) * 1.0;
    vec3 ncolor = texture2D(color_layer, cam_pos + np + rando * np_c ).rgb;
    //ncolor = mix(ncolor, vec3(0.4, 0.1, 0.7), np_c * 0.5);
    //mcolor = mix(mcolor, ncolor, np_c) * 0.3 + ncolor * 0.7;
    vec3 col =
        fcolor
        * op
        //* max(inAngle, static_light)
        * mcolor
    ;

    // Output to screen
    gl_FragColor = vec4(col,1.0);
}"""